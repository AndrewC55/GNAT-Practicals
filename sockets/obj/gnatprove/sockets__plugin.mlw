module Sockets__presentabsent
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type presentabsent
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = presentabsent,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type presentabsent__ref = {
                           mutable presentabsent__content : presentabsent
                           }
  
  function presentabsent__ref_presentabsent__content__projection (a: presentabsent__ref) : presentabsent =
    a.presentabsent__content
  
  meta "model_projection" function presentabsent__ref_presentabsent__content__projection
  
  meta "inline:no" function presentabsent__ref_presentabsent__content__projection
  
  val presentabsent__havoc (x: presentabsent__ref) : unit
    writes { x }
end

module Sockets__presentabsent__rep
  use Sockets__presentabsent as Sockets__presentabsent
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Sockets__presentabsent.presentabsent,
    predicate in_range = Sockets__presentabsent.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Sockets__onoff
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type onoff
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = onoff,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type onoff__ref = { mutable onoff__content : onoff }
  
  function onoff__ref_onoff__content__projection (a: onoff__ref) : onoff =
    a.onoff__content
  
  meta "model_projection" function onoff__ref_onoff__content__projection
  
  meta "inline:no" function onoff__ref_onoff__content__projection
  
  val onoff__havoc (x: onoff__ref) : unit
    writes { x }
end

module Sockets__onoff__rep
  use Sockets__onoff as Sockets__onoff
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Sockets__onoff.onoff,
    predicate in_range = Sockets__onoff.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Sockets__socket__rep
  use _gnatprove_standard.Main
  use int.Int
  use Sockets__presentabsent as Sockets__presentabsent
  use Sockets__presentabsent__rep as Sockets__presentabsent__rep
  use Sockets__onoff as Sockets__onoff
  use Sockets__onoff__rep as Sockets__onoff__rep
  
  type __split_fields = {
                       rec__sockets__socket__plug :
                         Sockets__presentabsent.presentabsent;
                       rec__sockets__socket__switch : Sockets__onoff.onoff
                       }
  
  function __split_fields_rec__sockets__socket__plug__projection (a: __split_fields) : 
    Sockets__presentabsent.presentabsent =
    a.rec__sockets__socket__plug
  
  meta "model_projection" function __split_fields_rec__sockets__socket__plug__projection
  
  meta "inline:no" function __split_fields_rec__sockets__socket__plug__projection
  
  function __split_fields_rec__sockets__socket__switch__projection (a: __split_fields) : 
    Sockets__onoff.onoff =
    a.rec__sockets__socket__switch
  
  meta "model_projection" function __split_fields_rec__sockets__socket__switch__projection
  
  meta "inline:no" function __split_fields_rec__sockets__socket__switch__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate sockets__socket__plug__pred (a: __rep) = true
  
  val sockets__socket__plug__pred (a: __rep) : bool
    ensures { result <-> (sockets__socket__plug__pred (a : __rep)) }
  
  val rec__sockets__socket__plug_ (a: __rep) : Sockets__presentabsent.presentabsent
    requires { sockets__socket__plug__pred a }
    ensures { (result = ((__split_fields a).rec__sockets__socket__plug)) }
  
  predicate sockets__socket__switch__pred (a: __rep) = true
  
  val sockets__socket__switch__pred (a: __rep) : bool
    ensures { result <-> (sockets__socket__switch__pred (a : __rep)) }
  
  val rec__sockets__socket__switch_ (a: __rep) : Sockets__onoff.onoff
    requires { sockets__socket__switch__pred a }
    ensures { (result = ((__split_fields a).rec__sockets__socket__switch)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Sockets__presentabsent__rep.to_rep
            ((__split_fields a).rec__sockets__socket__plug))
           = (Sockets__presentabsent__rep.to_rep
                ((__split_fields b).rec__sockets__socket__plug))) /\
          ((Sockets__onoff__rep.to_rep
              ((__split_fields a).rec__sockets__socket__switch))
             = (Sockets__onoff__rep.to_rep
                  ((__split_fields b).rec__sockets__socket__switch)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Sockets__socket
  use export Sockets__socket__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type socket = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function sockets__socket__plug__first__bit : int
  
  val function sockets__socket__plug__last__bit : int
  
  val function sockets__socket__plug__position : int
  
  axiom sockets__socket__plug__first__bit_axiom:
    (sockets__socket__plug__first__bit >= (0 : int))
  
  axiom sockets__socket__plug__last__bit_axiom:
    (sockets__socket__plug__last__bit > sockets__socket__plug__first__bit)
  
  axiom sockets__socket__plug__position_axiom:
    (sockets__socket__plug__position >= (0 : int))
  
  val function sockets__socket__switch__first__bit : int
  
  val function sockets__socket__switch__last__bit : int
  
  val function sockets__socket__switch__position : int
  
  axiom sockets__socket__switch__first__bit_axiom:
    (sockets__socket__switch__first__bit >= (0 : int))
  
  axiom sockets__socket__switch__last__bit_axiom:
    (sockets__socket__switch__last__bit
       > sockets__socket__switch__first__bit)
  
  axiom sockets__socket__switch__position_axiom:
    (sockets__socket__switch__position >= (0 : int))
  
  val function user_eq (a: socket) (b: socket) : bool
  
  val function dummy : socket
  
  type socket__ref = { mutable socket__content : socket }
  
  function socket__ref_socket__content__projection (a: socket__ref) : socket =
    a.socket__content
  
  meta "model_projection" function socket__ref_socket__content__projection
  
  meta "inline:no" function socket__ref_socket__content__projection
  
  val socket__havoc (x: socket__ref) : unit
    writes { x }
end

module Sockets__s1
  use _gnatprove_standard.Main
  use int.Int
  use Sockets__socket as Sockets__socket
  
  val s1__split_fields : Sockets__socket.__split_fields__ref
end

module Sockets__socket___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Sockets__socket as Sockets__socket
  
  predicate dynamic_invariant (temp___expr_179: Sockets__socket.socket) (temp___is_init_175: bool) (temp___skip_constant_176: bool) (temp___do_toplevel_177: bool) (temp___do_typ_inv_178: bool) =
    true
  
  val dynamic_invariant (temp___expr_179: Sockets__socket.socket) (temp___is_init_175: bool) (temp___skip_constant_176: bool) (temp___do_toplevel_177: bool) (temp___do_typ_inv_178: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_179 : Sockets__socket.socket))
                      (temp___is_init_175 : bool))
                     (temp___skip_constant_176 : bool))
                    (temp___do_toplevel_177 : bool))
                   (temp___do_typ_inv_178 : bool)) }
  
  predicate default_initial_assumption (temp___expr_180: Sockets__socket.socket) (temp___skip_top_level_181: bool) =
    true
  
  val default_initial_assumption (temp___expr_180: Sockets__socket.socket) (temp___skip_top_level_181: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_180 : Sockets__socket.socket))
                   (temp___skip_top_level_181 : bool)) }
end

module Sockets__presentabsent___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Sockets__presentabsent as Sockets__presentabsent
  
  predicate dynamic_invariant (temp___expr_165: int) (temp___is_init_161: bool) (temp___skip_constant_162: bool) (temp___do_toplevel_163: bool) (temp___do_typ_inv_164: bool) =
    if ((temp___is_init_161 = True) \/
          (Sockets__presentabsent.first <= Sockets__presentabsent.last)) then
      (((Sockets__presentabsent.dynamic_property Sockets__presentabsent.first)
          Sockets__presentabsent.last)
         temp___expr_165)
    else true
  
  val dynamic_invariant (temp___expr_165: int) (temp___is_init_161: bool) (temp___skip_constant_162: bool) (temp___do_toplevel_163: bool) (temp___do_typ_inv_164: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_165 : int))
                      (temp___is_init_161 : bool))
                     (temp___skip_constant_162 : bool))
                    (temp___do_toplevel_163 : bool))
                   (temp___do_typ_inv_164 : bool)) }
  
  predicate default_initial_assumption (temp___expr_166: int) (temp___skip_top_level_167: bool) =
    true
  
  val default_initial_assumption (temp___expr_166: int) (temp___skip_top_level_167: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_166 : int))
                   (temp___skip_top_level_167 : bool)) }
end

module Sockets__onoff___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Sockets__onoff as Sockets__onoff
  
  predicate dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) =
    if ((temp___is_init_168 = True) \/
          (Sockets__onoff.first <= Sockets__onoff.last)) then
      (((Sockets__onoff.dynamic_property Sockets__onoff.first)
          Sockets__onoff.last)
         temp___expr_172)
    else true
  
  val dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_172 : int))
                      (temp___is_init_168 : bool))
                     (temp___skip_constant_169 : bool))
                    (temp___do_toplevel_170 : bool))
                   (temp___do_typ_inv_171 : bool)) }
  
  predicate default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) =
    true
  
  val default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_173 : int))
                   (temp___skip_top_level_174 : bool)) }
end

module Sockets__s1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Sockets__plugin__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Sockets__s1 as Sockets__s1
  use Sockets__socket as Sockets__socket
  use Sockets__socket___axiom as Sockets__socket___axiom
  use Sockets__presentabsent as Sockets__presentabsent
  use Sockets__presentabsent__rep as Sockets__presentabsent__rep
  use Sockets__onoff as Sockets__onoff
  use Sockets__onoff__rep as Sockets__onoff__rep
  use Sockets__presentabsent___axiom as Sockets__presentabsent___axiom
  use Sockets__onoff___axiom as Sockets__onoff___axiom
  use Sockets__socket___axiom as Sockets__socket___axiom
  use Sockets__s1___axiom as Sockets__s1___axiom
  
  let def (__void_param : unit)
    requires { [#"sockets.ads" 14 0 0] true }
    ensures { [#"sockets.ads" 14 0 0]
              [#"sockets.ads" 17 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@GP_Sloc:sockets.ads:17:14]
              [@model_vc_post]
              [@GP_Id:0]
              [@comment:     Post => S1.switch = Off;              ^ sockets.ads:17:14:VC_POSTCONDITION]
              [@GP_Pretty_Ada:957]
              [@GP_Sloc:sockets.ads:17:14]
              ((Sockets__onoff__rep.to_rep
                  ((Sockets__socket.__split_fields
                       { Sockets__socket.__split_fields =
                           (Sockets__socket.__split_fields__content
                               Sockets__s1.s1__split_fields) }).Sockets__socket.rec__sockets__socket__switch))
                 = (1 : int)) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram sockets.ads:14]
      ());
     assume {
       ((((Sockets__socket___axiom.dynamic_invariant
             { Sockets__socket.__split_fields =
                 (Sockets__socket.__split_fields__content
                     Sockets__s1.s1__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram sockets.ads:14]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram sockets.ads:14]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Sockets__onoff__rep.to_rep
                ((Sockets__socket.__split_fields
                     { Sockets__socket.__split_fields =
                         (Sockets__socket.__split_fields__content
                             Sockets__s1.s1__split_fields) }).Sockets__socket.rec__sockets__socket__switch))
               = (1 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram sockets.ads:14] ());
     assume {
       [@GP_Pretty_Ada:945]
       ((Sockets__onoff__rep.to_rep
           ((Sockets__socket.__split_fields
                { Sockets__socket.__split_fields =
                    (Sockets__socket.__split_fields__content
                        Sockets__s1.s1__split_fields) }).Sockets__socket.rec__sockets__socket__switch))
          = (1 : int)) };
     (try
        ([@GP_Sloc:sockets.adb:7:7] [#"sockets.adb" 7 0 0] ());
        ([@GP_Sloc:sockets.adb:7:15]
         [#"sockets.adb" 7 0 0]
         (let temp___187 =
            let temp___186 =
              { Sockets__socket.__split_fields =
                  (Sockets__socket.__split_fields__content
                      Sockets__s1.s1__split_fields) } in
            ([#"sockets.adb" 7 0 0]
             (begin
                ensures { true }
                let _ =
                  let _ =
                    (Sockets__socket.__split_fields temp___186).Sockets__socket.rec__sockets__socket__plug in
                  () in
                ()
              end));
            ({ temp___186 with
               Sockets__socket.__split_fields =
                 ({ (Sockets__socket.__split_fields temp___186) with
                    Sockets__socket.rec__sockets__socket__plug =
                      (Sockets__presentabsent__rep.of_rep (0 : int)) }) }) in
          [#"sockets.adb" 7 0 0]
          (Sockets__s1.s1__split_fields.Sockets__socket.__split_fields__content <-
             (Sockets__socket.__split_fields temp___187))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((Sockets__onoff__rep.to_rep
                ((Sockets__socket.__split_fields
                     { Sockets__socket.__split_fields =
                         (Sockets__socket.__split_fields__content
                             Sockets__s1.s1__split_fields) }).Sockets__socket.rec__sockets__socket__switch))
               = (1 : int)) in
          () in
        ()
      end))
end
