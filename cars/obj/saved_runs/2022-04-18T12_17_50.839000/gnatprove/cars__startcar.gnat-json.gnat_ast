(* Module for axiomatizing type "key" defined at cars.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Cars__key
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type key  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = key,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type key__ref  = { mutable key__content : key }
  
  function   key__ref_key__content__projection (a : key__ref) requires {  }
    ensures  {  } returns key = a.key__content
  
  meta model_projection function key__ref_key__content__projection
  
  meta inline:no function key__ref_key__content__projection
  
  function   key__havoc (x : key__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "key" defined at cars.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Cars__key__rep
  
  use        Cars__key
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Cars__key.key,
    predicate in_range = Cars__key.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "engine" defined at cars.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Cars__engine
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type engine  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = engine,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type engine__ref  = { mutable engine__content : engine }
  
  function   engine__ref_engine__content__projection (a : engine__ref)
    requires {  } ensures  {  } returns engine = a.engine__content
  
  meta model_projection function engine__ref_engine__content__projection
  
  meta inline:no function engine__ref_engine__content__projection
  
  function   engine__havoc (x : engine__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "engine" defined at cars.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Cars__engine__rep
  
  use        Cars__engine
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Cars__engine.engine,
    predicate in_range = Cars__engine.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "car" defined at cars.ads:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Cars__car__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Cars__key
  use        Cars__key__rep
  use        Cars__engine
  use        Cars__engine__rep
  
  type __split_fields  = { [name:CarKey]
                           [model_trace:.860]rec__cars__car__carkey : Cars__key.key;
                           [name:Ignition]
                           [model_trace:.865]rec__cars__car__ignition : Cars__engine.engine }
  
  function [name:CarKey] [model_trace:.860] 
    __split_fields_rec__cars__car__carkey__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    Cars__key.key = a.rec__cars__car__carkey
  
  meta model_projection function __split_fields_rec__cars__car__carkey__projection
  
  meta inline:no function __split_fields_rec__cars__car__carkey__projection
  
  function [name:Ignition] [model_trace:.865] 
    __split_fields_rec__cars__car__ignition__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    Cars__engine.engine = a.rec__cars__car__ignition
  
  meta model_projection function __split_fields_rec__cars__car__ignition__projection
  
  meta inline:no function __split_fields_rec__cars__car__ignition__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   cars__car__carkey__pred (a : __rep) requires { True } ensures 
    { True } returns  = True
  
  function   rec__cars__car__carkey_ (a : __rep) requires
    { (cars__car__carkey__pred a) } ensures 
    { (result = a.__split_fields.rec__cars__car__carkey) } returns
    Cars__key.key
  
  function   cars__car__ignition__pred (a : __rep) requires { True } ensures 
    { True } returns  = True
  
  function   rec__cars__car__ignition_ (a : __rep) requires
    { (cars__car__ignition__pred a) } ensures 
    { (result = a.__split_fields.rec__cars__car__ignition) } returns
    Cars__engine.engine
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Cars__key__rep.to_rep a.__split_fields.rec__cars__car__carkey)
               = (Cars__key__rep.to_rep
                    b.__split_fields.rec__cars__car__carkey)) /\
              ((Cars__engine__rep.to_rep
                  a.__split_fields.rec__cars__car__ignition)
                 = (Cars__engine__rep.to_rep
                      b.__split_fields.rec__cars__car__ignition)))
           then True  else False)

end

(* Module for axiomatizing type "car" defined at cars.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Cars__car
  
  use export Cars__car__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type car  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   cars__car__carkey__first__bit () requires {  } ensures  {  }
    returns int
  
  function   cars__car__carkey__last__bit () requires {  } ensures  {  }
    returns int
  
  function   cars__car__carkey__position () requires {  } ensures  {  }
    returns int
  
  axiom cars__car__carkey__first__bit_axiom : ((cars__car__carkey__first__bit )
                                                 >= 0)
  
  axiom cars__car__carkey__last__bit_axiom : ((cars__car__carkey__last__bit )
                                                > (cars__car__carkey__first__bit
                                                     ))
  
  axiom cars__car__carkey__position_axiom : ((cars__car__carkey__position )
                                               >= 0)
  
  function   cars__car__ignition__first__bit () requires {  } ensures  {  }
    returns int
  
  function   cars__car__ignition__last__bit () requires {  } ensures  {  }
    returns int
  
  function   cars__car__ignition__position () requires {  } ensures  {  }
    returns int
  
  axiom cars__car__ignition__first__bit_axiom : ((cars__car__ignition__first__bit
                                                    ) >= 0)
  
  axiom cars__car__ignition__last__bit_axiom : ((cars__car__ignition__last__bit
                                                   )
                                                  > (cars__car__ignition__first__bit
                                                       ))
  
  axiom cars__car__ignition__position_axiom : ((cars__car__ignition__position )
                                                 >= 0)
  
  function   user_eq (a : car b : car) requires { True } ensures  { True }
    returns bool
  
  function   dummy () requires {  } ensures  {  } returns car
  
  type car__ref  = { mutable car__content : car }
  
  function   car__ref_car__content__projection (a : car__ref) requires {  }
    ensures  {  } returns car = a.car__content
  
  meta model_projection function car__ref_car__content__projection
  
  meta inline:no function car__ref_car__content__projection
  
  function   car__havoc (x : car__ref) requires {  } ensures  {  } returns
    unit

end

(* Module for defining a ref holding the value of variable "batmobile" defined at cars.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Cars__batmobile
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Cars__car
  
  val batmobile__split_fields [name:BatMobile] [model_projected]
  [model_trace:871] [sloc:cars.ads:12]: Cars__car.__split_fields

end

(* Module giving axioms for type "car" defined at cars.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cars__car___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Cars__car
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_179) : Cars__car.car
    ([mlw:proxy_symbol] [introduced] temp___is_init_175) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_178) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_180) : Cars__car.car
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_181) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "key" defined at cars.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cars__key___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Cars__key
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_165) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_161) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_164) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_161) = True) \/
          (Cars__key.first <= Cars__key.last))
       then
       (Cars__key.dynamic_property Cars__key.first Cars__key.last
          ([mlw:proxy_symbol] [introduced] temp___expr_165))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_166) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_167) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "engine" defined at cars.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Cars__engine___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Cars__engine
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_171) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_168) = True) \/
          (Cars__engine.first <= Cars__engine.last))
       then
       (Cars__engine.dynamic_property Cars__engine.first Cars__engine.last
          ([mlw:proxy_symbol] [introduced] temp___expr_172))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_174) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "batmobile" defined at cars.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Cars__batmobile___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "startcar" defined at cars.ads:14, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Cars__startcar__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Cars__batmobile
  use        Cars__car
  use        Cars__car___axiom
  use        Cars__key
  use        Cars__key__rep
  use        Cars__engine
  use        Cars__engine__rep
  use        Cars__key___axiom
  use        Cars__engine___axiom
  use        Cars__car___axiom
  use        Cars__batmobile___axiom
  
  function [GP_Subp:cars.ads:14] [sloc:cars.ads:14] def (__void_param : unit)
    requires { True } ensures 
    { ([sloc:cars.ads:17] ([GP_Reason:VC_POSTCONDITION]
                          [GP_Shape:pragargs__cmp]
                          [comment:     Post => BatMobile.Ignition = On;              ^ cars.ads:17:14:VC_POSTCONDITION]
                          [model_vc_post] [GP_Id:0]
                          [GP_Sloc:cars.ads:17:14] ([GP_Pretty_Ada:957]
                                                   [GP_Sloc:cars.ads:17:14] (
                                                   (Cars__engine__rep.to_rep
                                                      ( --pp_record_aggregate NOT IMPLEMENTED).Cars__car.__split_fields.Cars__car.rec__cars__car__ignition)
                                                     = 0)))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram cars.ads:14 *);
        assume
        { (Cars__car___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram cars.ads:14 *);
        (* Check for RTE in the Pre of the subprogram cars.ads:14 *);
        abstract ensures
        { True } begin  (let _ =
                       ((Cars__key__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Cars__car.__split_fields.Cars__car.rec__cars__car__carkey)
                          = 0)
                       in ())  end;
        (* Assume Pre of the subprogram cars.ads:14 *);
        assume
        { ([GP_Pretty_Ada:945] ((Cars__key__rep.to_rep
                                   ( --pp_record_aggregate NOT IMPLEMENTED).Cars__car.__split_fields.Cars__car.rec__cars__car__carkey)
                                  = 0)) };
        (try
        ();
          ([GP_Sloc:cars.adb:5:7] ([sloc:cars.adb:5] ()));
          ([GP_Sloc:cars.adb:5:26] ([sloc:cars.adb:5] (let ([mlw:proxy_symbol]
                                   [introduced] temp___187) =
                                   (let ([mlw:proxy_symbol]
                                     [introduced] temp___186) =
                                     ( --pp_record_aggregate NOT IMPLEMENTED)
                                     in abstract ensures
                                     { True } begin  (let _ =
                                                    ([mlw:proxy_symbol]
                                                      [introduced] temp___186).Cars__car.__split_fields.Cars__car.rec__cars__car__ignition
                                                    in ())  end;
                                     --pp_record_update NOT IMPLEMENTED)
                                   in (
                                   Cars__batmobile.batmobile__split_fields :=
                                   ([mlw:proxy_symbol]
                                     [introduced] temp___187).Cars__car.__split_fields))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Cars__engine__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Cars__car.__split_fields.Cars__car.rec__cars__car__ignition)
                          = 0)
                       in ())  end

end
