(* Module for defining a ref holding the value of variable "serving" defined at ticketmachine.ads:5, created in Gnat2Why.Decls.Translate_Variable *)
module Ticketmachine__serving
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val serving [model_trace:852] [name:serving]
  [model_projected] [sloc:ticketmachine.ads:5]: int

end

(* Module for defining a ref holding the value of variable "next" defined at ticketmachine.ads:6, created in Gnat2Why.Decls.Translate_Variable *)
module Ticketmachine__next
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val next [model_trace:856] [model_projected]
  [name:next] [sloc:ticketmachine.ads:6]: int

end

(* Module for possibly declaring a logic function for "invariant" defined at ticketmachine.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ticketmachine__invariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   invariant__
    (Ticketmachine__serving___serving___ : int
    Ticketmachine__next___next___ : int) requires { True } ensures  { True }
    returns bool
  
  function   invariant____function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : bool
    Ticketmachine__serving___serving___ : int
    Ticketmachine__next___next___ : int) requires { True } ensures  { True }
    returns bool

end

(* Module for axiomatizing type "tickets" defined at ticketmachine.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Ticketmachine__tickets
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type tickets  = <range 0 1000>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1000
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = tickets,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type tickets__ref  = { mutable tickets__content : tickets }
  
  function   tickets__ref_tickets__content__projection (a : tickets__ref)
    requires {  } ensures  {  } returns tickets = a.tickets__content
  
  meta model_projection function tickets__ref_tickets__content__projection
  
  meta inline:no function tickets__ref_tickets__content__projection
  
  function   tickets__havoc (x : tickets__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "tickets" defined at ticketmachine.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ticketmachine__tickets___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ticketmachine__tickets
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_166) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_162) = True) \/
          (Ticketmachine__tickets.first <= Ticketmachine__tickets.last))
       then
       (Ticketmachine__tickets.dynamic_property Ticketmachine__tickets.first
          Ticketmachine__tickets.last ([mlw:proxy_symbol]
          [introduced] temp___expr_166))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_168) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving a program function and a defining axiom for the expression function "invariant" defined at ticketmachine.ads:8, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Ticketmachine__invariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ticketmachine__serving
  use        Ticketmachine__next
  use        Ticketmachine__invariant
  use        Ticketmachine__tickets___axiom
  
  function   invariant__ (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ticketmachine__invariant.invariant__
               !Ticketmachine__serving.serving !Ticketmachine__next.next)) /\
         (Ticketmachine__invariant.invariant____function_guard result
            !Ticketmachine__serving.serving !Ticketmachine__next.next) /\
         (result
            = (!Ticketmachine__serving.serving <= !Ticketmachine__next.next))) }
    returns bool
  
  axiom invariant____post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom invariant____def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "serving" defined at ticketmachine.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ticketmachine__serving___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "next" defined at ticketmachine.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ticketmachine__next___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "taketicket" defined at ticketmachine.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Ticketmachine__taketicket__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ticketmachine__serving
  use        Ticketmachine__next
  use        Ticketmachine__invariant
  use        Ticketmachine__invariant___axiom
  use        Ticketmachine__tickets
  use        Ticketmachine__tickets___axiom
  use        Ticketmachine__tickets___axiom
  use        Ticketmachine__serving___axiom
  use        Ticketmachine__next___axiom
  use        Ticketmachine__invariant___axiom
  
  function [GP_Subp:ticketmachine.ads:11] [sloc:ticketmachine.ads:11] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:ticketmachine.ads:14] ([GP_Reason:VC_POSTCONDITION]
                                   [GP_Sloc:ticketmachine.ads:14:14]
                                   [comment:     Post => Invariant;              ^ ticketmachine.ads:14:14:VC_POSTCONDITION]
                                   [GP_Shape:pragargs__call_invariant]
                                   [model_vc_post]
                                   [GP_Id:1] ([GP_Sloc:ticketmachine.ads:14:14]
                                             [GP_Pretty_Ada:939] ((epsilon ([mlw:proxy_symbol]
                                                                  [introduced] temp___result_173) : bool {
                                                                  ((([mlw:proxy_symbol]
                                                                    [introduced] temp___result_173)
                                                                    = (
                                                                    Ticketmachine__invariant.invariant__
                                                                    !Ticketmachine__serving.serving
                                                                    !Ticketmachine__next.next))
                                                                    /\
                                                                    (Ticketmachine__invariant.invariant____function_guard
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___result_173)
                                                                    !Ticketmachine__serving.serving
                                                                    !Ticketmachine__next.next))})
                                                                    = True)))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram ticketmachine.ads:11 *);
        assume
        { (Ticketmachine__tickets___axiom.dynamic_invariant
             !Ticketmachine__serving.serving True False True True) };
        assume
        { (Ticketmachine__tickets___axiom.dynamic_invariant
             !Ticketmachine__next.next True False True True) };
        (* Assume moved pointers in outputs of the subprogram ticketmachine.ads:11 *);
        (* Check for RTE in the Pre of the subprogram ticketmachine.ads:11 *);
        abstract ensures
        { True } begin  (let _ =
                       ((!Ticketmachine__next.next < 1000) &&
                          (Ticketmachine__invariant___axiom.invariant__ ()))
                       in ())  end;
        (* Assume Pre of the subprogram ticketmachine.ads:11 *);
        assume
        { (([GP_Pretty_Ada:885] (!Ticketmachine__next.next < 1000)) /\
             ([GP_Pretty_Ada:888] ((epsilon ([mlw:proxy_symbol]
                                   [introduced] temp___result_172) : bool {
                                   ((([mlw:proxy_symbol]
                                       [introduced] temp___result_172)
                                       = (Ticketmachine__invariant.invariant__
                                            !Ticketmachine__serving.serving
                                            !Ticketmachine__next.next)) /\
                                      (Ticketmachine__invariant.invariant____function_guard
                                         ([mlw:proxy_symbol]
                                         [introduced] temp___result_172)
                                         !Ticketmachine__serving.serving
                                         !Ticketmachine__next.next))}) = True))) };
        (try
        ();
          ([GP_Sloc:ticketmachine.adb:6:7] ([sloc:ticketmachine.adb:6] ()));
          ([GP_Sloc:ticketmachine.adb:6:15] ([sloc:ticketmachine.adb:6] ()));
          ([GP_Sloc:ticketmachine.adb:6:12] ([sloc:ticketmachine.adb:6] (
                                            Ticketmachine__next.next :=
                                            ( ([sloc:ticketmachine.adb:6] 
                                              ([vc:annotation]
                                              [comment:      next := next + 1;                    ^ ticketmachine.adb:6:20:VC_RANGE_CHECK]
                                              [GP_Sloc:ticketmachine.adb:6:20]
                                              [GP_Reason:VC_RANGE_CHECK]
                                              [GP_Shape:next_assign__add]
                                              [GP_Id:0] (Ticketmachine__tickets.range_check_
                                                           (!Ticketmachine__next.next
                                                              + 1))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (Ticketmachine__invariant___axiom.invariant__ ()) in
                       ())  end

end
