module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Pigeonholes__box
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type box
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = box,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type box__ref = { mutable box__content : box }
  
  function box__ref_box__content__projection (a: box__ref) : box =
    a.box__content
  
  meta "model_projection" function box__ref_box__content__projection
  
  meta "inline:no" function box__ref_box__content__projection
  
  val box__havoc (x: box__ref) : unit
    writes { x }
end

module Pigeonholes__box__rep
  use Pigeonholes__box as Pigeonholes__box
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Pigeonholes__box.box,
    predicate in_range = Pigeonholes__box.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Pigeonholes__box
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Pigeonholes__box as Pigeonholes__box
  use Pigeonholes__box__rep as Pigeonholes__box__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Pigeonholes__box.box
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_161 : int.
          if ((a__first <= temp___idx_161) /\ (temp___idx_161 <= a__last)) then
            ((Pigeonholes__box__rep.to_rep ((get a) temp___idx_161))
               = (Pigeonholes__box__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_161))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_161 : int.
                 if ((a__first <= temp___idx_161) /\
                       (temp___idx_161 <= a__last)) then
                   ((Pigeonholes__box__rep.to_rep ((get a) temp___idx_161))
                      = (Pigeonholes__box__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_161))))
                 else true)))
end

module Pigeonholes__countbirds__d
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Pigeonholes__box as Array__Int__Pigeonholes__box
  
  val function d : Array__Int__Pigeonholes__box.map
end

module Pigeonholes__countbirds__b
  use _gnatprove_standard.Main
  use int.Int
  
  val function b : int
end

module Pigeonholes__countbirds__bs
  use _gnatprove_standard.Main
  use int.Int
  
  val bs : int__ref
end

module Pigeonholes__countbirds__n
  use _gnatprove_standard.Main
  use int.Int
  
  val n : int__ref
end

module Pigeonholes__countbirds__m
  use _gnatprove_standard.Main
  use int.Int
  
  val m : int__ref
end

module Pigeonholes__countbirds__L_2__R5b
  use _gnatprove_standard.Main
  use int.Int
  
  val function r5b : int
end

module Pigeonholes__countbirds__L_2__R6b
  use _gnatprove_standard.Main
  use int.Int
  
  val function r6b : int
end

module Pigeonholes__countbirds__L_2__i
  use _gnatprove_standard.Main
  use int.Int
  
  val i : int__ref
end

module Pigeonholes__box___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Pigeonholes__box as Pigeonholes__box
  
  predicate dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) =
    if ((temp___is_init_163 = True) \/
          (Pigeonholes__box.first <= Pigeonholes__box.last)) then
      (((Pigeonholes__box.dynamic_property Pigeonholes__box.first)
          Pigeonholes__box.last)
         temp___expr_167)
    else true
  
  val dynamic_invariant (temp___expr_167: int) (temp___is_init_163: bool) (temp___skip_constant_164: bool) (temp___do_toplevel_165: bool) (temp___do_typ_inv_166: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_167 : int))
                      (temp___is_init_163 : bool))
                     (temp___skip_constant_164 : bool))
                    (temp___do_toplevel_165 : bool))
                   (temp___do_typ_inv_166 : bool)) }
  
  predicate default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) =
    true
  
  val default_initial_assumption (temp___expr_168: int) (temp___skip_top_level_169: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_168 : int))
                   (temp___skip_top_level_169 : bool)) }
end

module Pigeonholes__ph_index
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type ph_index = <range 1 5>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (5 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = ph_index,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type ph_index__ref = { mutable ph_index__content : ph_index }
  
  function ph_index__ref_ph_index__content__projection (a: ph_index__ref) : ph_index =
    a.ph_index__content
  
  meta "model_projection" function ph_index__ref_ph_index__content__projection
  
  meta "inline:no" function ph_index__ref_ph_index__content__projection
  
  val ph_index__havoc (x: ph_index__ref) : unit
    writes { x }
end

module Pigeonholes__ph_index___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Pigeonholes__ph_index as Pigeonholes__ph_index
  
  predicate dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) =
    if ((temp___is_init_170 = True) \/
          (Pigeonholes__ph_index.first <= Pigeonholes__ph_index.last)) then
      (((Pigeonholes__ph_index.dynamic_property Pigeonholes__ph_index.first)
          Pigeonholes__ph_index.last)
         temp___expr_174)
    else true
  
  val dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_174 : int))
                      (temp___is_init_170 : bool))
                     (temp___skip_constant_171 : bool))
                    (temp___do_toplevel_172 : bool))
                   (temp___do_typ_inv_173 : bool)) }
  
  predicate default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) =
    true
  
  val default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_175 : int))
                   (temp___skip_top_level_176 : bool)) }
end

module Pigeonholes__pigeonhole___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Pigeonholes__box as Array__Int__Pigeonholes__box
  use Array__Int__Pigeonholes__box as Array__Int__Pigeonholes__box
  
  predicate dynamic_invariant (temp___expr_181: Array__Int__Pigeonholes__box.map) (temp___is_init_177: bool) (temp___skip_constant_178: bool) (temp___do_toplevel_179: bool) (temp___do_typ_inv_180: bool) =
    true
  
  val dynamic_invariant (temp___expr_181: Array__Int__Pigeonholes__box.map) (temp___is_init_177: bool) (temp___skip_constant_178: bool) (temp___do_toplevel_179: bool) (temp___do_typ_inv_180: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_181 : Array__Int__Pigeonholes__box.map))
                      (temp___is_init_177 : bool))
                     (temp___skip_constant_178 : bool))
                    (temp___do_toplevel_179 : bool))
                   (temp___do_typ_inv_180 : bool)) }
  
  predicate default_initial_assumption (temp___expr_183: Array__Int__Pigeonholes__box.map) (temp___skip_top_level_184: bool) =
    true
  
  val default_initial_assumption (temp___expr_183: Array__Int__Pigeonholes__box.map) (temp___skip_top_level_184: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_183 : Array__Int__Pigeonholes__box.map))
                   (temp___skip_top_level_184 : bool)) }
end

module Pigeonholes__countbirds__L_2
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_2
end

module Pigeonholes__countbirds__bs___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__n___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__m___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__L_2__i___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__L_2___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__d___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__L_2__R5b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__L_2__R6b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Pigeonholes__countbirds__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Pigeonholes__countbirds__d as Pigeonholes__countbirds__d
  use Pigeonholes__countbirds__b as Pigeonholes__countbirds__b
  use Pigeonholes__countbirds__bs as Pigeonholes__countbirds__bs
  use Pigeonholes__countbirds__n as Pigeonholes__countbirds__n
  use Pigeonholes__countbirds__m as Pigeonholes__countbirds__m
  use Pigeonholes__countbirds__L_2__R5b as Pigeonholes__countbirds__L_2__R5b
  use Pigeonholes__countbirds__L_2__R6b as Pigeonholes__countbirds__L_2__R6b
  use Pigeonholes__countbirds__L_2__i as Pigeonholes__countbirds__L_2__i
  use Pigeonholes__box as Pigeonholes__box
  use Pigeonholes__box___axiom as Pigeonholes__box___axiom
  use Pigeonholes__box__rep as Pigeonholes__box__rep
  use Pigeonholes__ph_index___axiom as Pigeonholes__ph_index___axiom
  use Array__Int__Pigeonholes__box as Array__Int__Pigeonholes__box
  use Pigeonholes__pigeonhole___axiom as Pigeonholes__pigeonhole___axiom
  use Pigeonholes__countbirds__L_2 as Pigeonholes__countbirds__L_2
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Pigeonholes__countbirds__bs___axiom as Pigeonholes__countbirds__bs___axiom
  use Pigeonholes__countbirds__n___axiom as Pigeonholes__countbirds__n___axiom
  use Pigeonholes__countbirds__m___axiom as Pigeonholes__countbirds__m___axiom
  use Pigeonholes__countbirds__L_2__i___axiom as Pigeonholes__countbirds__L_2__i___axiom
  use Pigeonholes__countbirds__L_2___axiom as Pigeonholes__countbirds__L_2___axiom
  use Pigeonholes__box___axiom as Pigeonholes__box___axiom
  use Pigeonholes__ph_index___axiom as Pigeonholes__ph_index___axiom
  use Pigeonholes__pigeonhole___axiom as Pigeonholes__pigeonhole___axiom
  use Pigeonholes__countbirds__d___axiom as Pigeonholes__countbirds__d___axiom
  use Pigeonholes__countbirds__b___axiom as Pigeonholes__countbirds__b___axiom
  use Pigeonholes__countbirds__L_2__R5b___axiom as Pigeonholes__countbirds__L_2__R5b___axiom
  use Pigeonholes__countbirds__L_2__R6b___axiom as Pigeonholes__countbirds__L_2__R6b___axiom
  
  val pigeonholes__countbirds__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"pigeonholes.ads" 11 0 0] true }
    ensures { [#"pigeonholes.ads" 11 0 0]
              [#"pigeonholes.ads" 12 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@comment:     Post => CountBirds'Result >= 0 and CountBirds'Result <= d'Length;              ^ pigeonholes.ads:12:14:VC_POSTCONDITION]
              [@GP_Sloc:pigeonholes.ads:12:14]
              [@model_vc_post]
              [@GP_Shape:pragargs__and]
              [@GP_Id:6]
              (([@GP_Pretty_Ada:1078]
                [@GP_Sloc:pigeonholes.ads:12:14]
                ((pigeonholes__countbirds__result.int__content) >= (0 : int))) /\
                 ([@GP_Sloc:pigeonholes.ads:12:41]
                  [@GP_Pretty_Ada:1084]
                  ((pigeonholes__countbirds__result.int__content)
                     <= (5 : int)))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram pigeonholes.ads:11]
      ());
     assume {
       ((((Pigeonholes__pigeonhole___axiom.dynamic_invariant
             Pigeonholes__countbirds__d.d)
            True)
           False)
          True)
         True };
     assume {
       ((((Pigeonholes__box___axiom.dynamic_invariant
             Pigeonholes__countbirds__b.b)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram pigeonholes.ads:11]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram pigeonholes.ads:11]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram pigeonholes.ads:11] ());
     (try
        ([#"pigeonholes.adb" 20 0 0]
         (([#"pigeonholes.adb" 20 0 0]
           (Pigeonholes__countbirds__bs.bs.int__content <- (0 : int)));
          ([#"pigeonholes.adb" 20 0 0]
           assume {
             [#"pigeonholes.adb" 20 0 0]
             (((((Standard__integer___axiom.dynamic_invariant
                    (Pigeonholes__countbirds__bs.bs.int__content))
                   True)
                  False)
                 True)
                True) })));
        ([#"pigeonholes.adb" 21 0 0]
         (([#"pigeonholes.adb" 21 0 0]
           (Pigeonholes__countbirds__n.n.int__content <- (1 : int)));
          ([#"pigeonholes.adb" 21 0 0]
           assume {
             [#"pigeonholes.adb" 21 0 0]
             (((((Pigeonholes__ph_index___axiom.dynamic_invariant
                    (Pigeonholes__countbirds__n.n.int__content))
                   True)
                  False)
                 True)
                True) })));
        ([#"pigeonholes.adb" 22 0 0]
         (([#"pigeonholes.adb" 22 0 0]
           (Pigeonholes__countbirds__m.m.int__content <- (5 : int)));
          ([#"pigeonholes.adb" 22 0 0]
           assume {
             [#"pigeonholes.adb" 22 0 0]
             (((((Pigeonholes__ph_index___axiom.dynamic_invariant
                    (Pigeonholes__countbirds__m.m.int__content))
                   True)
                  False)
                 True)
                True) })));
        ([#"pigeonholes.adb" 24 0 0] ());
        ([@GP_Sloc:pigeonholes.adb:24:16] [#"pigeonholes.adb" 24 0 0] ());
        ([@GP_Sloc:pigeonholes.adb:24:19] [#"pigeonholes.adb" 24 0 0] ());
        ([@GP_Sloc:pigeonholes.adb:24:16]
         [#"pigeonholes.adb" 24 0 0]
         [#"pigeonholes.adb" 24 0 0]
         ((let pigeonholes__countbirds__L_2__R5b__assume =
             Pigeonholes__countbirds__n.n.int__content in
           [#"pigeonholes.adb" 24 0 0]
           assume {
             [#"pigeonholes.adb" 24 0 0]
             (pigeonholes__countbirds__L_2__R5b__assume
                = Pigeonholes__countbirds__L_2__R5b.r5b) });
          ([#"pigeonholes.adb" 24 0 0]
           assume {
             [#"pigeonholes.adb" 24 0 0]
             (((((Pigeonholes__ph_index___axiom.dynamic_invariant
                    Pigeonholes__countbirds__L_2__R5b.r5b)
                   True)
                  False)
                 True)
                True) })));
        ([@GP_Sloc:pigeonholes.adb:24:19]
         [#"pigeonholes.adb" 24 0 0]
         [#"pigeonholes.adb" 24 0 0]
         ((let pigeonholes__countbirds__L_2__R6b__assume =
             Pigeonholes__countbirds__m.m.int__content in
           [#"pigeonholes.adb" 24 0 0]
           assume {
             [#"pigeonholes.adb" 24 0 0]
             (pigeonholes__countbirds__L_2__R6b__assume
                = Pigeonholes__countbirds__L_2__R6b.r6b) });
          ([#"pigeonholes.adb" 24 0 0]
           assume {
             [#"pigeonholes.adb" 24 0 0]
             (((((Pigeonholes__ph_index___axiom.dynamic_invariant
                    Pigeonholes__countbirds__L_2__R6b.r6b)
                   True)
                  False)
                 True)
                True) })));
        ([@GP_Sloc:pigeonholes.adb:24:21]
         [#"pigeonholes.adb" 24 0 0]
         (let temp___205 = Pigeonholes__countbirds__L_2__R5b.r5b in
          let temp___206 = Pigeonholes__countbirds__L_2__R6b.r6b in
          ([@GNAT-comment:Translation of an unrolled Ada loop from pigeonholes.adb:24]
           ());
          ([#"pigeonholes.adb" 24 0 0]
           (try
              ([@GNAT-comment:Unrolling of the loop statements of loop pigeonholes.adb:24]
               ());
              ([#"pigeonholes.adb" 24 0 0]
               (Pigeonholes__countbirds__L_2__i.i.int__content <- (1 : int)));
              (if ((Boolean.andb
                      (temp___205
                         <= (Pigeonholes__countbirds__L_2__i.i.int__content)))
                     ((Pigeonholes__countbirds__L_2__i.i.int__content)
                        <= temp___206)) then
                 ([@GP_Sloc:pigeonholes.adb:25:10]
                  [#"pigeonholes.adb" 25 0 0]
                  (if (([#"pigeonholes.adb" 25 0 0]
                        [#"pigeonholes.adb" 25 0 0]
                        (([@branch_id=925] Main.spark__branch).bool__content <-
                           ((Pigeonholes__box__rep.to_rep
                               ((Array__Int__Pigeonholes__box.get
                                   Pigeonholes__countbirds__d.d)
                                  (Pigeonholes__countbirds__L_2__i.i.int__content)))
                              = Pigeonholes__countbirds__b.b)));
                       (([@branch_id=925] Main.spark__branch).bool__content)) then
                     (([@GP_Sloc:pigeonholes.adb:25:27]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:33]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:30]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          ([#"pigeonholes.adb" 25 0 0]
                           [@comment:         if d(I) = b then bs := bs + 1; else bs := bs; end if;                                    ^ pigeonholes.adb:25:36:VC_OVERFLOW_CHECK]
                           [@vc:annotation]
                           [@GP_Reason:VC_OVERFLOW_CHECK]
                           [@GP_Sloc:pigeonholes.adb:25:36]
                           [@GP_Shape:L_2_while__if__bs_assign__add]
                           [@GP_Id:5]
                           (Standard__integer.range_check_
                              ((Pigeonholes__countbirds__bs.bs.int__content)
                                 + (1 : int)))))))
                   else
                     (([@GP_Sloc:pigeonholes.adb:25:46]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:52]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:49]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          (Pigeonholes__countbirds__bs.bs.int__content))))))
               else ());
              (Pigeonholes__countbirds__L_2__i.i.int__content <- (2 : int));
              (if ((Boolean.andb
                      (temp___205
                         <= (Pigeonholes__countbirds__L_2__i.i.int__content)))
                     ((Pigeonholes__countbirds__L_2__i.i.int__content)
                        <= temp___206)) then
                 ([@GP_Sloc:pigeonholes.adb:25:10]
                  [#"pigeonholes.adb" 25 0 0]
                  (if (([#"pigeonholes.adb" 25 0 0]
                        [#"pigeonholes.adb" 25 0 0]
                        (([@branch_id=925] Main.spark__branch).bool__content <-
                           ((Pigeonholes__box__rep.to_rep
                               ((Array__Int__Pigeonholes__box.get
                                   Pigeonholes__countbirds__d.d)
                                  (Pigeonholes__countbirds__L_2__i.i.int__content)))
                              = Pigeonholes__countbirds__b.b)));
                       (([@branch_id=925] Main.spark__branch).bool__content)) then
                     (([@GP_Sloc:pigeonholes.adb:25:27]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:33]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:30]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          ([#"pigeonholes.adb" 25 0 0]
                           [@comment:         if d(I) = b then bs := bs + 1; else bs := bs; end if;                                    ^ pigeonholes.adb:25:36:VC_OVERFLOW_CHECK]
                           [@vc:annotation]
                           [@GP_Reason:VC_OVERFLOW_CHECK]
                           [@GP_Sloc:pigeonholes.adb:25:36]
                           [@GP_Shape:L_2_while__if__bs_assign__add]
                           [@GP_Id:5]
                           (Standard__integer.range_check_
                              ((Pigeonholes__countbirds__bs.bs.int__content)
                                 + (1 : int)))))))
                   else
                     (([@GP_Sloc:pigeonholes.adb:25:46]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:52]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:49]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          (Pigeonholes__countbirds__bs.bs.int__content))))))
               else ());
              (Pigeonholes__countbirds__L_2__i.i.int__content <- (3 : int));
              (if ((Boolean.andb
                      (temp___205
                         <= (Pigeonholes__countbirds__L_2__i.i.int__content)))
                     ((Pigeonholes__countbirds__L_2__i.i.int__content)
                        <= temp___206)) then
                 ([@GP_Sloc:pigeonholes.adb:25:10]
                  [#"pigeonholes.adb" 25 0 0]
                  (if (([#"pigeonholes.adb" 25 0 0]
                        [#"pigeonholes.adb" 25 0 0]
                        (([@branch_id=925] Main.spark__branch).bool__content <-
                           ((Pigeonholes__box__rep.to_rep
                               ((Array__Int__Pigeonholes__box.get
                                   Pigeonholes__countbirds__d.d)
                                  (Pigeonholes__countbirds__L_2__i.i.int__content)))
                              = Pigeonholes__countbirds__b.b)));
                       (([@branch_id=925] Main.spark__branch).bool__content)) then
                     (([@GP_Sloc:pigeonholes.adb:25:27]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:33]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:30]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          ([#"pigeonholes.adb" 25 0 0]
                           [@comment:         if d(I) = b then bs := bs + 1; else bs := bs; end if;                                    ^ pigeonholes.adb:25:36:VC_OVERFLOW_CHECK]
                           [@vc:annotation]
                           [@GP_Reason:VC_OVERFLOW_CHECK]
                           [@GP_Sloc:pigeonholes.adb:25:36]
                           [@GP_Shape:L_2_while__if__bs_assign__add]
                           [@GP_Id:5]
                           (Standard__integer.range_check_
                              ((Pigeonholes__countbirds__bs.bs.int__content)
                                 + (1 : int)))))))
                   else
                     (([@GP_Sloc:pigeonholes.adb:25:46]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:52]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:49]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          (Pigeonholes__countbirds__bs.bs.int__content))))))
               else ());
              (Pigeonholes__countbirds__L_2__i.i.int__content <- (4 : int));
              (if ((Boolean.andb
                      (temp___205
                         <= (Pigeonholes__countbirds__L_2__i.i.int__content)))
                     ((Pigeonholes__countbirds__L_2__i.i.int__content)
                        <= temp___206)) then
                 ([@GP_Sloc:pigeonholes.adb:25:10]
                  [#"pigeonholes.adb" 25 0 0]
                  (if (([#"pigeonholes.adb" 25 0 0]
                        [#"pigeonholes.adb" 25 0 0]
                        (([@branch_id=925] Main.spark__branch).bool__content <-
                           ((Pigeonholes__box__rep.to_rep
                               ((Array__Int__Pigeonholes__box.get
                                   Pigeonholes__countbirds__d.d)
                                  (Pigeonholes__countbirds__L_2__i.i.int__content)))
                              = Pigeonholes__countbirds__b.b)));
                       (([@branch_id=925] Main.spark__branch).bool__content)) then
                     (([@GP_Sloc:pigeonholes.adb:25:27]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:33]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:30]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          ([#"pigeonholes.adb" 25 0 0]
                           [@comment:         if d(I) = b then bs := bs + 1; else bs := bs; end if;                                    ^ pigeonholes.adb:25:36:VC_OVERFLOW_CHECK]
                           [@vc:annotation]
                           [@GP_Reason:VC_OVERFLOW_CHECK]
                           [@GP_Sloc:pigeonholes.adb:25:36]
                           [@GP_Shape:L_2_while__if__bs_assign__add]
                           [@GP_Id:5]
                           (Standard__integer.range_check_
                              ((Pigeonholes__countbirds__bs.bs.int__content)
                                 + (1 : int)))))))
                   else
                     (([@GP_Sloc:pigeonholes.adb:25:46]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:52]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:49]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          (Pigeonholes__countbirds__bs.bs.int__content))))))
               else ());
              (Pigeonholes__countbirds__L_2__i.i.int__content <- (5 : int));
              (if ((Boolean.andb
                      (temp___205
                         <= (Pigeonholes__countbirds__L_2__i.i.int__content)))
                     ((Pigeonholes__countbirds__L_2__i.i.int__content)
                        <= temp___206)) then
                 ([@GP_Sloc:pigeonholes.adb:25:10]
                  [#"pigeonholes.adb" 25 0 0]
                  (if (([#"pigeonholes.adb" 25 0 0]
                        [#"pigeonholes.adb" 25 0 0]
                        (([@branch_id=925] Main.spark__branch).bool__content <-
                           ((Pigeonholes__box__rep.to_rep
                               ((Array__Int__Pigeonholes__box.get
                                   Pigeonholes__countbirds__d.d)
                                  (Pigeonholes__countbirds__L_2__i.i.int__content)))
                              = Pigeonholes__countbirds__b.b)));
                       (([@branch_id=925] Main.spark__branch).bool__content)) then
                     (([@GP_Sloc:pigeonholes.adb:25:27]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:33]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:30]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          ([#"pigeonholes.adb" 25 0 0]
                           [@comment:         if d(I) = b then bs := bs + 1; else bs := bs; end if;                                    ^ pigeonholes.adb:25:36:VC_OVERFLOW_CHECK]
                           [@vc:annotation]
                           [@GP_Reason:VC_OVERFLOW_CHECK]
                           [@GP_Sloc:pigeonholes.adb:25:36]
                           [@GP_Shape:L_2_while__if__bs_assign__add]
                           [@GP_Id:5]
                           (Standard__integer.range_check_
                              ((Pigeonholes__countbirds__bs.bs.int__content)
                                 + (1 : int)))))))
                   else
                     (([@GP_Sloc:pigeonholes.adb:25:46]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:52]
                       [#"pigeonholes.adb" 25 0 0] ());
                      ([@GP_Sloc:pigeonholes.adb:25:49]
                       [#"pigeonholes.adb" 25 0 0]
                       [#"pigeonholes.adb" 25 0 0]
                       (Pigeonholes__countbirds__bs.bs.int__content <-
                          (Pigeonholes__countbirds__bs.bs.int__content))))))
               else ())
            with Pigeonholes__countbirds__L_2.L_2 -> ()
            end))));
        ([@GP_Sloc:pigeonholes.adb:27:14] [#"pigeonholes.adb" 27 0 0] ());
        ([@GP_Sloc:pigeonholes.adb:27:7]
         [#"pigeonholes.adb" 27 0 0]
         (([#"pigeonholes.adb" 27 0 0]
           (pigeonholes__countbirds__result.int__content <-
              (Pigeonholes__countbirds__bs.bs.int__content)));
          ([#"pigeonholes.adb" 27 0 0] ((raise Return__exc) : unit))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((pigeonholes__countbirds__result.int__content) >= (0 : int)))
              ((pigeonholes__countbirds__result.int__content) <= (5 : int)) in
          () in
        ()
      end);
     (pigeonholes__countbirds__result.int__content))
end
