(* Module for axiomatizing type "box" defined at pigeonholes.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Pigeonholes__box
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type box  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = box,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type box__ref  = { mutable box__content : box }
  
  function   box__ref_box__content__projection (a : box__ref) requires {  }
    ensures  {  } returns box = a.box__content
  
  meta model_projection function box__ref_box__content__projection
  
  meta inline:no function box__ref_box__content__projection
  
  function   box__havoc (x : box__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "box" defined at pigeonholes.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Pigeonholes__box__rep
  
  use        Pigeonholes__box
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Pigeonholes__box.box,
    predicate in_range = Pigeonholes__box.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "TpigeonholeB" defined at pigeonholes.ads:6, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Pigeonholes__box
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pigeonholes__box
  use        Pigeonholes__box__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "d" defined at pigeonholes.ads:8, created in Gnat2Why.Decls.Translate_Variable *)
module Pigeonholes__pigeonbegone__d
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Pigeonholes__box
  
  val d [name:d] [model_projected]
  [model_trace:1041] [sloc:pigeonholes.ads:8]: Array__Int__Pigeonholes__box.map

end

(* Module for defining a ref holding the value of variable "pos" defined at pigeonholes.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Pigeonholes__pigeonbegone__pos
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val pos [model_trace:826] [model_projected]
  [name:Pos] [sloc:pigeonholes.adb:6]: int

end

(* Module for axiomatizing type "ph_index" defined at pigeonholes.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pigeonholes__ph_index
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type ph_index  = <range 1 5>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 5
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = ph_index,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type ph_index__ref  = { mutable ph_index__content : ph_index }
  
  function   ph_index__ref_ph_index__content__projection (a : ph_index__ref)
    requires {  } ensures  {  } returns ph_index = a.ph_index__content
  
  meta model_projection function ph_index__ref_ph_index__content__projection
  
  meta inline:no function ph_index__ref_ph_index__content__projection
  
  function   ph_index__havoc (x : ph_index__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "ph_index" defined at pigeonholes.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pigeonholes__ph_index___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pigeonholes__ph_index
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_174) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_170) = True) \/
          (Pigeonholes__ph_index.first <= Pigeonholes__ph_index.last))
       then
       (Pigeonholes__ph_index.dynamic_property Pigeonholes__ph_index.first
          Pigeonholes__ph_index.last ([mlw:proxy_symbol]
          [introduced] temp___expr_174))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "pigeonhole" defined at pigeonholes.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pigeonholes__pigeonhole___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Pigeonholes__box
  use        Array__Int__Pigeonholes__box
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_181) : Array__Int__Pigeonholes__box.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_180) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_183) : Array__Int__Pigeonholes__box.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_184) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining the loop exit exception for the loop "L_1" defined at pigeonholes.adb:8, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Pigeonholes__pigeonbegone__L_1
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module giving an empty axiom for the entity "pos" defined at pigeonholes.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pigeonholes__pigeonbegone__pos___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "L_1" defined at pigeonholes.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pigeonholes__pigeonbegone__L_1___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "box" defined at pigeonholes.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pigeonholes__box___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pigeonholes__box
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Pigeonholes__box.first <= Pigeonholes__box.last))
       then
       (Pigeonholes__box.dynamic_property Pigeonholes__box.first
          Pigeonholes__box.last ([mlw:proxy_symbol]
          [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "d" defined at pigeonholes.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pigeonholes__pigeonbegone__d___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "pigeonbegone" defined at pigeonholes.ads:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Pigeonholes__pigeonbegone__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Array__Int__Pigeonholes__box
  use        Pigeonholes__pigeonbegone__d
  use        Pigeonholes__pigeonbegone__pos
  use        Pigeonholes__box
  use        Pigeonholes__box__rep
  use        Pigeonholes__ph_index
  use        Pigeonholes__ph_index___axiom
  use        Array__Int__Pigeonholes__box
  use        Pigeonholes__pigeonhole___axiom
  use        Pigeonholes__pigeonbegone__L_1
  use        Pigeonholes__pigeonbegone__pos___axiom
  use        Pigeonholes__pigeonbegone__L_1___axiom
  use        Pigeonholes__box___axiom
  use        Pigeonholes__ph_index___axiom
  use        Pigeonholes__pigeonhole___axiom
  use        Pigeonholes__pigeonbegone__d___axiom
  
  function [GP_Subp:pigeonholes.ads:8] [sloc:pigeonholes.ads:8] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:pigeonholes.ads:9] ([GP_Shape:pragargs__forall]
                                [GP_Reason:VC_POSTCONDITION]
                                [comment:     Post => (for all J in d'Range => d(J) /= Pigeon);              ^ pigeonholes.ads:9:14:VC_POSTCONDITION]
                                [GP_Sloc:pigeonholes.ads:9:14]
                                [model_vc_post]
                                [GP_Id:4] --pp_universal_quantif NOT IMPLEMENTED)) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram pigeonholes.ads:8 *);
        assume
        { (Pigeonholes__pigeonhole___axiom.dynamic_invariant
             !Pigeonholes__pigeonbegone__d.d True False True True) };
        (* Assume moved pointers in outputs of the subprogram pigeonholes.ads:8 *);
        (* Check for RTE in the Pre of the subprogram pigeonholes.ads:8 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram pigeonholes.ads:8 *);
        (try
        ();
          ([sloc:pigeonholes.adb:6] ( Pigeonholes__pigeonbegone__pos.pos :=
          ( 1));
          assume
          { (Pigeonholes__ph_index___axiom.dynamic_invariant
               !Pigeonholes__pigeonbegone__pos.pos True False True True) });
          ([sloc:pigeonholes.adb:8] ());
          ();
          ([GP_Sloc:pigeonholes.adb:8:26] ([sloc:pigeonholes.adb:8] (* Translation of an Ada loop from pigeonholes.adb:8 *);
                                          (if
                                          (!Pigeonholes__pigeonbegone__pos.pos
                                             < 5)
                                          then
                                          (try
                                          (let temp___loop_entry_199 =
                                            !Pigeonholes__pigeonbegone__d.d
                                            in
                                            (* While loop translating the Ada loop from pigeonholes.adb:8 *);
                                            ([sloc:pigeonholes.adb:12] 
                                            loop
                                              ();
                                              ([GP_Sloc:pigeonholes.adb:9:12] 
                                              ([sloc:pigeonholes.adb:9] ()));
                                              ([GP_Sloc:pigeonholes.adb:9:17] 
                                              ([sloc:pigeonholes.adb:9] (
                                              Pigeonholes__pigeonbegone__d.d
                                              :=
                                              (Array__Int__Pigeonholes__box.set
                                                 !Pigeonholes__pigeonbegone__d.d
                                                 !Pigeonholes__pigeonbegone__pos.pos
                                                 (Pigeonholes__box__rep.of_rep
                                                    ( 1))))));
                                              ([GP_Sloc:pigeonholes.adb:11:10] 
                                              ([sloc:pigeonholes.adb:11] ()));
                                              ([GP_Sloc:pigeonholes.adb:11:17] 
                                              ([sloc:pigeonholes.adb:11] ()));
                                              ([GP_Sloc:pigeonholes.adb:11:14] 
                                              ([sloc:pigeonholes.adb:11] (
                                              Pigeonholes__pigeonbegone__pos.pos
                                              :=
                                              ( ([sloc:pigeonholes.adb:11] 
                                                ([GP_Shape:L_1_while__pos_assign__add]
                                                [vc:annotation]
                                                [GP_Reason:VC_RANGE_CHECK]
                                                [comment:         Pos := Pos + 1;                     ^ pigeonholes.adb:11:21:VC_RANGE_CHECK]
                                                [GP_Id:0]
                                                [GP_Sloc:pigeonholes.adb:11:21] (
                                                Pigeonholes__ph_index.range_check_
                                                  (!Pigeonholes__pigeonbegone__pos.pos
                                                     + 1))))))));
                                              (* Check for absence of RTE in the loop invariant and variant *);
                                              (let ([mlw:proxy_symbol]
                                              [introduced] temp___inv_201) =
                                              (let j =
                                                ( any  pre {} post {} return
                                                  int) in
                                              (if
                                              (_gnatprove_standard.Boolean.andb
                                                 (1 <= j)
                                                 (j
                                                    <= (!Pigeonholes__pigeonbegone__pos.pos
                                                          - 1)))
                                              then
                                              abstract ensures
                                              { True } begin  (let _ =
                                                             ((Pigeonholes__box__rep.to_rep
                                                                 (Array__Int__Pigeonholes__box.get
                                                                    !Pigeonholes__pigeonbegone__d.d
                                                                    assert
                                                                    { ([sloc:pigeonholes.adb:12] 
                                                                    ([vc:annotation]
                                                                    [GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp]
                                                                    [comment:         pragma Loop_Invariant (for all J in d'First..(Pos-1) => d(J) /= Pigeon);                                                                    ^ pigeonholes.adb:12:68:VC_INDEX_CHECK]
                                                                    [GP_Sloc:pigeonholes.adb:12:68]
                                                                    [GP_Reason:VC_INDEX_CHECK]
                                                                    [GP_Id:1] (
                                                                    (Pigeonholes__ph_index.first
                                                                    <= j) /\
                                                                    (j
                                                                    <= Pigeonholes__ph_index.last)))) };
                                                                    j)) <> 0)
                                                             in ())  end
                                              ));
                                              ( any  pre {} post
                                              {((result = True) <->
                                                  --pp_universal_quantif NOT IMPLEMENTED)}
                                              return bool) in abstract
                                            ensures
                                            { True } begin  (let _ = 
                                                           () in ())  end);
                                            abstract ensures
                                            { True } begin  (let _ =
                                                           !Pigeonholes__pigeonbegone__pos.pos
                                                           in ())  end
                                            invariant
                                            {([sloc:pigeonholes.adb:12] 
                                             ([GP_Reason:VC_LOOP_INVARIANT]
                                             [GP_Sloc:pigeonholes.adb:12:33]
                                             [vc:annotation]
                                             [GP_Shape:L_1_while__pragargs__forall]
                                             [comment:         pragma Loop_Invariant (for all J in d'First..(Pos-1) => d(J) /= Pigeon);                                 ^ pigeonholes.adb:12:33:VC_LOOP_INVARIANT]
                                             [GP_Id:2] --pp_universal_quantif NOT IMPLEMENTED))}
                                            variant 
                                            {> =>
                                             !Pigeonholes__pigeonbegone__pos.pos}
                                            (* Assume implicit invariants from the loop pigeonholes.adb:8 *);
                                            assume
                                            { ((True /\
                                                  (Pigeonholes__ph_index___axiom.dynamic_invariant
                                                     !Pigeonholes__pigeonbegone__pos.pos
                                                     True True True True) /\
                                                  True /\ True) /\
                                                 (Pigeonholes__pigeonhole___axiom.dynamic_invariant
                                                    !Pigeonholes__pigeonbegone__d.d
                                                    True True True True) /\
                                                 True /\ True) };
                                            (* Continuation of loop after loop invariant and variant *);
                                            (* Check for the exit condition and loop statements appearing before the loop invariant of loop pigeonholes.adb:8 *);
                                            (if --pp_not NOT IMPLEMENTED then
                                            raise Pigeonholes__pigeonbegone__L_1.L_1
                                            )
                                             end loop)) with
                                          | Pigeonholes__pigeonbegone__L_1.L_1 
                                          -> ())
          )));
    ([GP_Sloc:pigeonholes.adb:15:17] ([sloc:pigeonholes.adb:15] (
                                     Pigeonholes__pigeonbegone__d.d :=
                                     (Array__Int__Pigeonholes__box.set
                                        !Pigeonholes__pigeonbegone__d.d 5
                                        (Pigeonholes__box__rep.of_rep ( 1))))));
    raise Return__exc with | Return__exc  -> ());
  abstract ensures
  { True } begin  (let _ = (let j = ( any  pre {} post {} return int) in
                 (if (_gnatprove_standard.Boolean.andb (1 <= j) (j <= 5))
                 then
                 abstract ensures
                 { True } begin  (let _ =
                                ((Pigeonholes__box__rep.to_rep
                                    (Array__Int__Pigeonholes__box.get
                                       !Pigeonholes__pigeonbegone__d.d j))
                                   <> 0)
                                in ())  end
                 ));
                 ( any  pre {} post
                 {((result = True) <-> --pp_universal_quantif NOT IMPLEMENTED)}
                 return bool) in
())  end

end
